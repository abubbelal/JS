var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _modelJs = require("./model.js");
var _recipeViewJs = require("./views/recipeView.js");
var _recipeViewJsDefault = parcelHelpers.interopDefault(_recipeViewJs);
var _searchViewJs = require("./views/searchView.js");
var _searchViewJsDefault = parcelHelpers.interopDefault(_searchViewJs);
var _resultsViewJs = require("./views/resultsView.js");
var _resultsViewJsDefault = parcelHelpers.interopDefault(_resultsViewJs);
var _bookmarksViewJs = require("./views/bookmarksView.js");
var _bookmarksViewJsDefault = parcelHelpers.interopDefault(_bookmarksViewJs);
var _paginationViewJs = require("./views/paginationView.js");
var _paginationViewJsDefault = parcelHelpers.interopDefault(_paginationViewJs);
var _addRecipeViewJs = require("./views/addRecipeView.js");
var _addRecipeViewJsDefault = parcelHelpers.interopDefault(_addRecipeViewJs);
var _configJs = require("./config.js");
//for polifying JS
var _runtime = require("regenerator-runtime/runtime"); //for polifying async await
var _stable = require("core-js/stable"); //for polifying other ES6 features
var _regeneratorRuntime = require("regenerator-runtime");
// if(module.hot) {
//   module.hot.accept();
// }
const controlRecipes = async function() {
    try {
        const id = window.location.hash.slice(1);
        // console.log(id);
        if (!id) return;
        _recipeViewJsDefault.default.renderSpinner();
        //0 update results view to mark selected search result
        _resultsViewJsDefault.default.update(_modelJs.getSearchResultsPage());
        //1. loading recipe
        await _modelJs.loadRecipe(id); //model returns a promise so we have to await that promise
        //2. rendering recipe
        _recipeViewJsDefault.default.render(_modelJs.state.recipe);
        //3 update bookmark view
        _bookmarksViewJsDefault.default.update(_modelJs.state.bookmarks);
    } catch (e) {
        _recipeViewJsDefault.default.renderError();
        console.error(e);
    }
};
const controlSearchResults = async function() {
    try {
        //1) get search query
        const query = _searchViewJsDefault.default.getQuery();
        if (!query) return;
        //2) load search
        await _modelJs.loadSearchResults(query);
        //3) render results
        // console.log(model.state.search.results);
        // resultsView.render(model.state.search.results);
        _resultsViewJsDefault.default.render(_modelJs.getSearchResultsPage());
        // 4) Render initial pagination
        _paginationViewJsDefault.default.render(_modelJs.state.search);
    } catch (e) {
        console.log(e);
    }
};
const controlPagination = function(goToPage) {
    //render new results
    _resultsViewJsDefault.default.render(_modelJs.getSearchResultsPage(goToPage));
    //render new pagination buttons
    _paginationViewJsDefault.default.render(_modelJs.state.search);
};
const controlServings = function(newServings) {
    //update the recipe servings (in state)
    _modelJs.updateServings(newServings);
    //update the recipe view
    // recipeView.render(model.state.recipe);
    _recipeViewJsDefault.default.update(_modelJs.state.recipe);
};
const controlAddBookmark = function() {
    //add/remove bookmark
    if (!_modelJs.state.recipe.bookmarked) _modelJs.addBookmark(_modelJs.state.recipe);
    else _modelJs.addBookmark(_modelJs.state.recipe);
    //update recipe view
    // console.log(model.state.recipe);
    _recipeViewJsDefault.default.update(_modelJs.state.recipe);
    //render bookmarks
    _bookmarksViewJsDefault.default.render(_modelJs.state.bookmarks);
};
const controlAddRecipe = async function(newRecipe) {
    try {
        console.log(newRecipe);
        //show loading spinner
        _addRecipeViewJsDefault.default.renderSpinner();
        //upload the new recipe data
        await _modelJs.uploadRecipe(newRecipe);
        console.log(_modelJs.state.recipe);
        //render recipe
        _recipeViewJsDefault.default.render(_modelJs.state.recipe);
        //success message
        _addRecipeViewJsDefault.default.renderMessage();
        //render bookmark view
        _bookmarksViewJsDefault.default.render(_modelJs.state.bookmarks);
        //change id in url
        window.history.pushState(null, '', `#${_modelJs.state.recipe.id}`);
        //close form window
        setTimeout(function() {
            _addRecipeViewJsDefault.default.toggleWindow();
        }, _configJs.MODAL_CLOSE_SEC * 1000);
    } catch (e) {
        console.error('------------------ERROR', e);
        _addRecipeViewJsDefault.default.renderError(e.message);
    }
};
const controlBookmarks = function() {
    _bookmarksViewJsDefault.default.render(_modelJs.state.bookmarks);
};
const init = function() {
    _bookmarksViewJsDefault.default.addHandlerRender(controlBookmarks);
    _recipeViewJsDefault.default.addHandlerRender(controlRecipes);
    _recipeViewJsDefault.default.addHandlerUpdateServings(controlServings);
    _recipeViewJsDefault.default.addHandlerAddBookmark(addHandlerAddBookmark);
    _searchViewJsDefault.default.addHandlerSearch(controlSearchResults);
    _paginationViewJsDefault.default.addHandlerClick(controlPagination);
    _addRecipeViewJsDefault.default._addHandlerUpload(controlAddRecipe);
// controlServings();
};
init();
