var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _iconsSvg = require("url:../../img/icons.svg");
var _iconsSvgDefault = parcelHelpers.interopDefault(_iconsSvg);
class View {
    _data;
    /**
     * Render the received object to the DOM
     * @param {Object | Object[]} data -- The data to be rendered (e.g. recipe)
     * @param {boolean} [render = true] If false, create markup string instead of rendering to the DOM 
     * @returns {undefined | string} A markup string is returned if render = false
     * @this {Object} View instance
     * @todo finiish the implementation
     */ render(data, render = true) {
        //if no data, or if it's an array and it's empty
        if (!data || Array.isArray(data) && data.length === 0) return this.renderError();
        this._data = data;
        const markup = this._generateMarkup();
        if (!render) return markup;
        this._clear();
        this._parentElement.insertAdjacentHTML('afterbegin', markup);
    }
    _clear() {
        this._parentElement.innerHTML = '';
    }
    renderSpinner() {
        const markup = `\n        <div class="spinner">\n                <svg>\n                    <use href="${_iconsSvgDefault.default}#icon-loader"></use>\n                </svg>\n                </div>\n                `;
        this._clear();
        this._parentElement.insertAdjacentHTML('afterbegin', markup);
    }
    renderError(message = this._errorMessage) {
        const markup = `\n        <div class="error">\n        <div>\n          <svg>\n            <use href="${_iconsSvgDefault.default}#icon-alert-triangle"></use>\n          </svg>\n        </div>\n        <p>${message}</p>\n      </div>\n        `;
        this._clear();
        this._parentElement.insertAdjacentHTML('afterbegin', markup);
    }
    renderMessage(message = this._message) {
        const markup = `\n        <div class="message">\n        <div>\n          <svg>\n            <use href="${_iconsSvgDefault.default}#icon-smile"></use>\n          </svg>\n        </div>\n        <p>${message}</p>\n      </div>\n        `;
        this._clear();
        this._parentElement.insertAdjacentHTML('afterbegin', markup);
    }
    update(data) {
        // if(!data || (Array.isArray(data) && data.length === 0)) return this.renderError(); //useless error on page load when no recipe is searched for
        this._data = data;
        const newMarkup = this._generateMarkup();
        //convert markup to dom object
        const newDOM = document.createRange().createContextualFragment(newMarkup); //convert string to real node dom objects
        const newElements = Array.from(newDOM.querySelectorAll('*'));
        // console.log(newElements);
        const curElements = Array.from(this._parentElement.querySelectorAll('*'));
        // console.log(curElements);
        // console.log(newElements);
        newElements.forEach((newEl, i)=>{
            const curEl = curElements[i];
            console.log(curEl, newEl.isEqualNode(curEl));
            //updates changed texts
            if (!newEl.isEqualNode(curEl) && newEl.firstChild?.nodeValue.trim() !== '') curEl.textContent = newEl.textContent;
            //updates changed attributes
            if (!newEl.isEqualNode(curEl)) // console.log(newEl.attributes);
            Array.from(newEl.attributes).forEach((attr)=>curEl.setAttribute(attr.name, attr.value)
            );
        });
    }
}
exports.default = View;
